"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/TechnicalDrawings.tsx":
/*!**********************************************!*\
  !*** ./src/components/TechnicalDrawings.tsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportTechnicalDrawings: function() { return /* binding */ exportTechnicalDrawings; }\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n\n// Fixed canvas dimensions\nconst CANVAS_WIDTH = 300;\nconst CANVAS_HEIGHT = 240;\nconst drawFloorPlan = (ctx, dimensions, features)=>{\n    // Calculate scale to fit the drawing\n    const maxDimension = Math.max(dimensions.width, dimensions.length);\n    const scale = Math.min((CANVAS_WIDTH - 100) / maxDimension, (CANVAS_HEIGHT - 100) / maxDimension);\n    const width = dimensions.width * scale;\n    const length = dimensions.length * scale;\n    // Clear and set background\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(-CANVAS_WIDTH / 2, -CANVAS_HEIGHT / 2, CANVAS_WIDTH, CANVAS_HEIGHT);\n    // Draw grid (fixed spacing)\n    ctx.strokeStyle = \"#E5E7EB\";\n    ctx.lineWidth = 0.5;\n    const gridSpacing = 20; // Fixed grid spacing\n    for(let x = -width / 2; x <= width / 2; x += gridSpacing){\n        ctx.beginPath();\n        ctx.moveTo(x, -length / 2);\n        ctx.lineTo(x, length / 2);\n        ctx.stroke();\n    }\n    for(let y = -length / 2; y <= length / 2; y += gridSpacing){\n        ctx.beginPath();\n        ctx.moveTo(-width / 2, y);\n        ctx.lineTo(width / 2, y);\n        ctx.stroke();\n    }\n    // Draw walls with improved thickness and shadow\n    const wallThickness = 6; // Increased wall thickness\n    ctx.shadowColor = \"rgba(0, 0, 0, 0.1)\";\n    ctx.shadowBlur = 5;\n    ctx.shadowOffsetX = 2;\n    ctx.shadowOffsetY = 2;\n    ctx.fillStyle = \"#1F2937\";\n    // Outer walls\n    ctx.fillRect(-width / 2 - wallThickness, -length / 2 - wallThickness, width + wallThickness * 2, wallThickness);\n    ctx.fillRect(-width / 2 - wallThickness, length / 2, width + wallThickness * 2, wallThickness);\n    ctx.fillRect(-width / 2 - wallThickness, -length / 2 - wallThickness, wallThickness, length + wallThickness * 2);\n    ctx.fillRect(width / 2, -length / 2 - wallThickness, wallThickness, length + wallThickness * 2);\n    // Reset shadow for other elements\n    ctx.shadowColor = \"transparent\";\n    // Draw features with improved visibility\n    features.forEach((feature)=>{\n        const featureWidth = feature.width * scale;\n        const featureDepth = 8; // Increased feature depth\n        let x = 0;\n        let y = 0;\n        switch(feature.position.wallPosition){\n            case \"front\":\n                x = feature.position.alignment === \"left\" ? -width / 2 + feature.position.xOffset * scale : feature.position.alignment === \"right\" ? width / 2 - feature.position.xOffset * scale - featureWidth : -featureWidth / 2 + feature.position.xOffset * scale;\n                y = length / 2 - featureDepth;\n                break;\n            case \"back\":\n                x = feature.position.alignment === \"left\" ? -width / 2 + feature.position.xOffset * scale : feature.position.alignment === \"right\" ? width / 2 - feature.position.xOffset * scale - featureWidth : -featureWidth / 2 + feature.position.xOffset * scale;\n                y = -length / 2;\n                break;\n            case \"left\":\n                y = feature.position.alignment === \"left\" ? -length / 2 + feature.position.xOffset * scale : feature.position.alignment === \"right\" ? length / 2 - feature.position.xOffset * scale - featureWidth : -featureWidth / 2 + feature.position.xOffset * scale;\n                x = -width / 2;\n                break;\n            case \"right\":\n                y = feature.position.alignment === \"left\" ? -length / 2 + feature.position.xOffset * scale : feature.position.alignment === \"right\" ? length / 2 - feature.position.xOffset * scale - featureWidth : -featureWidth / 2 + feature.position.xOffset * scale;\n                x = width / 2 - featureDepth;\n                break;\n        }\n        // Draw feature with shadow and highlight\n        ctx.shadowColor = \"rgba(0, 0, 0, 0.2)\";\n        ctx.shadowBlur = 3;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n        ctx.fillStyle = \"#2563EB\";\n        if (feature.position.wallPosition === \"front\" || feature.position.wallPosition === \"back\") {\n            ctx.fillRect(x, y, featureWidth, featureDepth);\n        } else {\n            ctx.fillRect(x, y, featureDepth, featureWidth);\n        }\n        // Add feature label\n        ctx.shadowColor = \"transparent\";\n        ctx.font = \"8px Arial\";\n        ctx.fillStyle = \"#1F2937\";\n        ctx.textAlign = \"center\";\n        const label = \"\".concat(feature.type, \" (\").concat(feature.width, \"'\\xd7\").concat(feature.height, \"')\");\n        if (feature.position.wallPosition === \"front\" || feature.position.wallPosition === \"back\") {\n            ctx.fillText(label, x + featureWidth / 2, y + featureDepth / 2);\n        } else {\n            ctx.fillText(label, x + featureDepth / 2, y + featureWidth / 2);\n        }\n    });\n    // Draw dimensions with improved visibility\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillStyle = \"#000000\";\n    ctx.lineWidth = 1;\n    ctx.font = \"12px Arial\";\n    ctx.textAlign = \"center\";\n    // Width dimension with improved arrows\n    const widthY = length / 2 + 20;\n    ctx.beginPath();\n    ctx.moveTo(-width / 2, widthY);\n    ctx.lineTo(width / 2, widthY);\n    ctx.stroke();\n    // Arrow heads\n    const arrowSize = 6;\n    ctx.beginPath();\n    ctx.moveTo(-width / 2 - arrowSize, widthY - arrowSize);\n    ctx.lineTo(-width / 2, widthY);\n    ctx.lineTo(-width / 2 - arrowSize, widthY + arrowSize);\n    ctx.moveTo(width / 2 + arrowSize, widthY - arrowSize);\n    ctx.lineTo(width / 2, widthY);\n    ctx.lineTo(width / 2 + arrowSize, widthY + arrowSize);\n    ctx.stroke();\n    // Dimension text with background\n    const widthText = \"\".concat(dimensions.width, \"'\");\n    const textMetrics = ctx.measureText(widthText);\n    const padding = 4;\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(-textMetrics.width / 2 - padding, widthY + 5, textMetrics.width + padding * 2, 16);\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(widthText, 0, widthY + 15);\n    // Length dimension with improved arrows\n    const lengthX = width / 2 + 20;\n    ctx.save();\n    ctx.translate(lengthX, 0);\n    ctx.rotate(Math.PI / 2);\n    ctx.beginPath();\n    ctx.moveTo(-length / 2, 0);\n    ctx.lineTo(length / 2, 0);\n    ctx.stroke();\n    // Arrow heads\n    ctx.beginPath();\n    ctx.moveTo(-length / 2 - arrowSize, -arrowSize);\n    ctx.lineTo(-length / 2, 0);\n    ctx.lineTo(-length / 2 - arrowSize, arrowSize);\n    ctx.moveTo(length / 2 + arrowSize, -arrowSize);\n    ctx.lineTo(length / 2, 0);\n    ctx.lineTo(length / 2 + arrowSize, arrowSize);\n    ctx.stroke();\n    // Dimension text with background\n    const lengthText = \"\".concat(dimensions.length, \"'\");\n    const lengthMetrics = ctx.measureText(lengthText);\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(-lengthMetrics.width / 2 - padding, 5, lengthMetrics.width + padding * 2, 16);\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(lengthText, 0, 15);\n    ctx.restore();\n};\nconst drawFrontElevation = (ctx, dimensions, features)=>{\n    // Calculate scale to fit the drawing\n    const maxDimension = Math.max(dimensions.width, dimensions.height + dimensions.width / 2 * (dimensions.roofPitch / 12));\n    const scale = Math.min((CANVAS_WIDTH - 100) / maxDimension, (CANVAS_HEIGHT - 100) / maxDimension);\n    const width = dimensions.width * scale;\n    const height = dimensions.height * scale;\n    const roofHeight = dimensions.width / 2 * (dimensions.roofPitch / 12) * scale;\n    // Clear and set background\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(-CANVAS_WIDTH / 2, -CANVAS_HEIGHT / 2, CANVAS_WIDTH, CANVAS_HEIGHT);\n    // Draw grid with improved visibility\n    ctx.strokeStyle = \"#E5E7EB\";\n    ctx.lineWidth = 0.5;\n    const gridSpacing = 20;\n    for(let x = -width / 2; x <= width / 2; x += gridSpacing){\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, -(height + roofHeight));\n        ctx.stroke();\n    }\n    for(let y = 0; y >= -(height + roofHeight); y -= gridSpacing){\n        ctx.beginPath();\n        ctx.moveTo(-width / 2, y);\n        ctx.lineTo(width / 2, y);\n        ctx.stroke();\n    }\n    // Draw walls and roof with shadow\n    ctx.shadowColor = \"rgba(0, 0, 0, 0.1)\";\n    ctx.shadowBlur = 5;\n    ctx.shadowOffsetX = 2;\n    ctx.shadowOffsetY = 2;\n    ctx.strokeStyle = \"#1F2937\";\n    ctx.fillStyle = \"#F3F4F6\";\n    ctx.lineWidth = 2;\n    // Main wall\n    ctx.beginPath();\n    ctx.moveTo(-width / 2, 0);\n    ctx.lineTo(-width / 2, -height);\n    ctx.lineTo(0, -(height + roofHeight));\n    ctx.lineTo(width / 2, -height);\n    ctx.lineTo(width / 2, 0);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    // Reset shadow for features\n    ctx.shadowColor = \"transparent\";\n    // Draw features with improved visibility\n    features.filter((f)=>f.position.wallPosition === \"front\").forEach((feature)=>{\n        const featureWidth = feature.width * scale;\n        const featureHeight = feature.height * scale;\n        let x = feature.position.alignment === \"left\" ? -width / 2 + feature.position.xOffset * scale : feature.position.alignment === \"right\" ? width / 2 - feature.position.xOffset * scale - featureWidth : -featureWidth / 2 + feature.position.xOffset * scale;\n        let y = -(feature.position.yOffset * scale + featureHeight);\n        // Draw feature with shadow\n        ctx.shadowColor = \"rgba(0, 0, 0, 0.2)\";\n        ctx.shadowBlur = 3;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n        ctx.fillStyle = \"#2563EB\";\n        ctx.fillRect(x, y, featureWidth, featureHeight);\n        // Add feature label\n        ctx.shadowColor = \"transparent\";\n        ctx.font = \"8px Arial\";\n        ctx.fillStyle = \"#1F2937\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"\".concat(feature.type, \" (\").concat(feature.width, \"'\\xd7\").concat(feature.height, \"')\"), x + featureWidth / 2, y + featureHeight / 2);\n    });\n    // Draw dimensions with improved visibility\n    const drawDimensionLine = function(start, end, text) {\n        let offset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;\n        const arrowSize = 6;\n        const padding = 4; // Define padding here within the function scope\n        // Draw dimension line\n        ctx.beginPath();\n        ctx.moveTo(...start);\n        ctx.lineTo(...end);\n        ctx.stroke();\n        // Draw arrow heads\n        ctx.beginPath();\n        ctx.moveTo(start[0] - arrowSize, start[1] - arrowSize);\n        ctx.lineTo(start[0], start[1]);\n        ctx.lineTo(start[0] - arrowSize, start[1] + arrowSize);\n        ctx.moveTo(end[0] + arrowSize, end[1] - arrowSize);\n        ctx.lineTo(end[0], end[1]);\n        ctx.lineTo(end[0] + arrowSize, end[1] + arrowSize);\n        ctx.stroke();\n        // Draw text with background\n        const textMetrics = ctx.measureText(text);\n        const textX = (start[0] + end[0]) / 2;\n        const textY = start[1] + offset;\n        ctx.fillStyle = \"#FFFFFF\";\n        ctx.fillRect(textX - textMetrics.width / 2 - padding, textY - 8, textMetrics.width + padding * 2, 16);\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(text, textX, textY);\n    };\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillStyle = \"#000000\";\n    ctx.lineWidth = 1;\n    ctx.font = \"12px Arial\";\n    ctx.textAlign = \"center\";\n    // Width dimension\n    drawDimensionLine([\n        -width / 2,\n        20\n    ], [\n        width / 2,\n        20\n    ], \"\".concat(dimensions.width, \"'\"));\n    // Height dimension\n    drawDimensionLine([\n        width / 2 + 20,\n        0\n    ], [\n        width / 2 + 20,\n        -height\n    ], \"\".concat(dimensions.height, \"'\"), 15);\n    // Total height dimension\n    drawDimensionLine([\n        width / 2 + 40,\n        0\n    ], [\n        width / 2 + 40,\n        -(height + roofHeight)\n    ], \"\".concat((dimensions.height + dimensions.width / 2 * (dimensions.roofPitch / 12)).toFixed(1), \"'\"), 15);\n    // Roof pitch label with improved visibility\n    ctx.font = \"bold 12px Arial\";\n    ctx.fillStyle = \"#1F2937\";\n    const pitchText = \"\".concat(dimensions.roofPitch, \":12 pitch\");\n    const pitchMetrics = ctx.measureText(pitchText);\n    const padding = 4; // Define padding here for the roof pitch label\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(-pitchMetrics.width / 2 - padding, -(height + roofHeight / 2) - 8, pitchMetrics.width + padding * 2, 16);\n    ctx.fillStyle = \"#1F2937\";\n    ctx.fillText(pitchText, 0, -(height + roofHeight / 2));\n};\nconst drawSideElevation = (ctx, dimensions, features)=>{\n    // Calculate scale to fit the drawing\n    const maxDimension = Math.max(dimensions.length, dimensions.height + dimensions.width / 2 * (dimensions.roofPitch / 12));\n    const scale = Math.min((CANVAS_WIDTH - 100) / maxDimension, (CANVAS_HEIGHT - 100) / maxDimension);\n    const length = dimensions.length * scale;\n    const height = dimensions.height * scale;\n    const roofHeight = dimensions.width / 2 * (dimensions.roofPitch / 12) * scale;\n    // Clear and set background\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(-CANVAS_WIDTH / 2, -CANVAS_HEIGHT / 2, CANVAS_WIDTH, CANVAS_HEIGHT);\n    // Draw grid\n    ctx.strokeStyle = \"#E5E7EB\";\n    ctx.lineWidth = 0.5;\n    const gridSpacing = 20;\n    for(let x = -length / 2; x <= length / 2; x += gridSpacing){\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, -(height + roofHeight));\n        ctx.stroke();\n    }\n    for(let y = 0; y >= -(height + roofHeight); y -= gridSpacing){\n        ctx.beginPath();\n        ctx.moveTo(-length / 2, y);\n        ctx.lineTo(length / 2, y);\n        ctx.stroke();\n    }\n    // Draw walls and roof\n    ctx.strokeStyle = \"#1F2937\";\n    ctx.fillStyle = \"#F3F4F6\";\n    ctx.lineWidth = 2;\n    // Main wall\n    ctx.beginPath();\n    ctx.moveTo(-length / 2, 0);\n    ctx.lineTo(-length / 2, -height);\n    ctx.lineTo(-length / 2, -(height + roofHeight));\n    ctx.lineTo(length / 2, -(height + roofHeight));\n    ctx.lineTo(length / 2, -height);\n    ctx.lineTo(length / 2, 0);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    // Draw features\n    features.filter((f)=>f.position.wallPosition === \"left\").forEach((feature)=>{\n        const featureWidth = feature.width * scale;\n        const featureHeight = feature.height * scale;\n        let x = feature.position.alignment === \"left\" ? -length / 2 + feature.position.xOffset * scale : feature.position.alignment === \"right\" ? length / 2 - feature.position.xOffset * scale - featureWidth : -featureWidth / 2 + feature.position.xOffset * scale;\n        let y = -(feature.position.yOffset * scale + featureHeight);\n        ctx.fillStyle = \"#2563EB\";\n        ctx.fillRect(x, y, featureWidth, featureHeight);\n    });\n    // Draw dimensions\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillStyle = \"#000000\";\n    ctx.lineWidth = 1;\n    ctx.font = \"12px Arial\";\n    ctx.textAlign = \"center\";\n    // Length dimension\n    const lengthY = 20;\n    ctx.beginPath();\n    ctx.moveTo(-length / 2, lengthY);\n    ctx.lineTo(length / 2, lengthY);\n    ctx.stroke();\n    ctx.fillText(\"\".concat(dimensions.length, \"'\"), 0, lengthY + 15);\n    // Height dimension\n    const heightX = length / 2 + 20;\n    ctx.beginPath();\n    ctx.moveTo(heightX, 0);\n    ctx.lineTo(heightX, -height);\n    ctx.stroke();\n    ctx.fillText(\"\".concat(dimensions.height, \"'\"), heightX + 15, -height / 2);\n    // Total height dimension\n    const totalHeightX = length / 2 + 40;\n    ctx.beginPath();\n    ctx.moveTo(totalHeightX, 0);\n    ctx.lineTo(totalHeightX, -(height + roofHeight));\n    ctx.stroke();\n    ctx.fillText(\"\".concat((dimensions.height + dimensions.width / 2 * (dimensions.roofPitch / 12)).toFixed(1), \"'\"), totalHeightX + 15, -(height + roofHeight) / 2);\n};\nconst createDrawing = (drawFn)=>{\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = CANVAS_WIDTH;\n    canvas.height = CANVAS_HEIGHT;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return \"\";\n    // Set up coordinate system\n    ctx.translate(CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n    // Draw\n    drawFn(ctx);\n    return canvas.toDataURL(\"image/png\");\n};\nconst exportTechnicalDrawings = (dimensions, features)=>{\n    const pdf = new jspdf__WEBPACK_IMPORTED_MODULE_0__.jsPDF({\n        orientation: \"landscape\",\n        unit: \"px\",\n        format: [\n            800,\n            600\n        ]\n    });\n    // Add title and border\n    pdf.setFillColor(255, 255, 255);\n    pdf.rect(20, 20, 760, 560, \"F\");\n    pdf.setDrawColor(0);\n    pdf.setLineWidth(1);\n    pdf.rect(20, 20, 760, 560, \"S\");\n    pdf.setFontSize(16);\n    pdf.text(\"Barn Technical Drawings\", 400, 40, {\n        align: \"center\"\n    });\n    // Floor Plan (top left)\n    const floorPlan = createDrawing((ctx)=>drawFloorPlan(ctx, dimensions, features));\n    pdf.addImage(floorPlan, \"PNG\", 40, 60, CANVAS_WIDTH, CANVAS_HEIGHT);\n    pdf.setFontSize(12);\n    pdf.text(\"Floor Plan\", 190, 320);\n    // Front Elevation (top right)\n    const frontElevation = createDrawing((ctx)=>drawFrontElevation(ctx, dimensions, features));\n    pdf.addImage(frontElevation, \"PNG\", 460, 60, CANVAS_WIDTH, CANVAS_HEIGHT);\n    pdf.text(\"Front Elevation\", 610, 320);\n    // Side Elevation (bottom left)\n    const sideElevation = createDrawing((ctx)=>drawSideElevation(ctx, dimensions, features));\n    pdf.addImage(sideElevation, \"PNG\", 40, 340, CANVAS_WIDTH, CANVAS_HEIGHT);\n    pdf.text(\"Side Elevation\", 190, 540);\n    // Add specifications table (bottom right)\n    pdf.setFontSize(14);\n    pdf.text(\"Building Specifications\", 460, 360);\n    pdf.setFontSize(12);\n    const specs = [\n        [\n            \"Width:\",\n            \"\".concat(dimensions.width, \" ft\")\n        ],\n        [\n            \"Length:\",\n            \"\".concat(dimensions.length, \" ft\")\n        ],\n        [\n            \"Wall Height:\",\n            \"\".concat(dimensions.height, \" ft\")\n        ],\n        [\n            \"Roof Pitch:\",\n            \"\".concat(dimensions.roofPitch, \":12\")\n        ],\n        [\n            \"Peak Height:\",\n            \"\".concat((dimensions.height + dimensions.width / 2 * (dimensions.roofPitch / 12)).toFixed(1), \" ft\")\n        ],\n        [\n            \"Floor Area:\",\n            \"\".concat(dimensions.width * dimensions.length, \" sq ft\")\n        ]\n    ];\n    specs.forEach((spec, i)=>{\n        pdf.text(spec[0], 480, 390 + i * 25);\n        pdf.text(spec[1], 580, 390 + i * 25);\n    });\n    // Add footer\n    const today = new Date();\n    pdf.setFontSize(10);\n    pdf.text(\"Generated on \".concat(today.toLocaleDateString()), 400, 565, {\n        align: \"center\"\n    });\n    pdf.save(\"barn-technical-drawings.pdf\");\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/TechnicalDrawings.tsx\n"));

/***/ })

});